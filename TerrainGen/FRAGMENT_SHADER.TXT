#version 330 core
in vec3 fragment_color;
in vec3 normal_vec;
in vec3 fragment_pos;
out vec4 color_out;

// lighting
uniform vec3 light_col;
uniform vec3 light_pos;
uniform vec3 view_pos; // camera

void main(){
    float ambient_strength = 0.1;
    vec3 ambient = ambient_strength * light_col;

    vec3 norm = normalize(normal_vec);
    vec3 light_dir = normalize(light_pos - fragment_pos);
    float diff = max(dot(norm,light_dir), 0.0);
    vec3 diffuse = diff*light_col;

    float specular_strength = 0.5;
    vec3 view_dir = normalize(view_pos - fragment_pos);
    vec3 reflect_dir = reflect(-light_dir, norm);
    float spec = pow(max(dot(view_dir, reflect_dir), 0.0),32);
    vec3 specular = specular_strength * spec * light_col;

    vec3 res = (ambient+diffuse+specular) * fragment_color;
    color_out = vec4(res, 1.0);
}


